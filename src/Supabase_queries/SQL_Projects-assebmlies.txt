-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create enums for project and assembly statuses
CREATE TYPE project_status AS ENUM (
    'Planning', 
    'In Production', 
    'Completed', 
    'Cancelled'
);

CREATE TYPE assembly_status AS ENUM (
    'Waiting', 
    'In Production', 
    'Welding', 
    'Painting', 
    'Completed'
);

-- Projects table
CREATE TABLE IF NOT EXISTS projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL UNIQUE,
    internal_number TEXT NOT NULL UNIQUE,
    client TEXT NOT NULL,
    client_representative TEXT,
    project_start DATE NOT NULL,
    project_end DATE NOT NULL,
    delivery_date DATE,
    delivery_location TEXT,
    total_weight DECIMAL,
    status project_status NOT NULL,
    responsible_manager TEXT NOT NULL,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraint: end date must be after start date
    CONSTRAINT project_dates_check CHECK (project_end >= project_start),
    -- Constraint: delivery date must be within project timeframe
    CONSTRAINT delivery_date_check CHECK (
        delivery_date IS NULL OR 
        (delivery_date >= project_start AND delivery_date <= project_end)
    )
);

-- Project drawings table
CREATE TABLE IF NOT EXISTS project_drawings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size BIGINT NOT NULL,
    content_type TEXT NOT NULL,
    uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Assemblies table
CREATE TABLE IF NOT EXISTS assemblies (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    weight DECIMAL NOT NULL,
    quantity INTEGER NOT NULL,
    painting_spec TEXT,
    status assembly_status NOT NULL,
    start_date DATE,
    end_date DATE,
    quality_control_status TEXT,
    quality_control_notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraint: weight and quantity must be positive
    CONSTRAINT positive_weight CHECK (weight > 0),
    CONSTRAINT positive_quantity CHECK (quantity > 0),
    -- Constraint: end date must be after start date if both are provided
    CONSTRAINT assembly_dates_check CHECK (
        end_date IS NULL OR start_date IS NULL OR end_date >= start_date
    )
);

-- Assembly drawings table
CREATE TABLE IF NOT EXISTS assembly_drawings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    assembly_id UUID NOT NULL REFERENCES assemblies(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size BIGINT NOT NULL,
    content_type TEXT NOT NULL,
    uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create triggers to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to projects table
CREATE TRIGGER update_projects_updated_at
BEFORE UPDATE ON projects
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Apply trigger to assemblies table
CREATE TRIGGER update_assemblies_updated_at
BEFORE UPDATE ON assemblies
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();