{
	"info": {
		"_postman_id": "8fd9e532-e274-4b85-8f0d-c1f2a5a9b6c9",
		"name": "TrackFlow Logistics API Tests",
		"description": "Tests for TrackFlow Logistics Mobile API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Environment Setup",
			"item": [
				{
					"name": "Set Environment Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store environment variables for the tests",
									"pm.environment.set(\"baseUrl\", \"https://api.trackflow.pl/api\");",
									"pm.environment.set(\"nfcCardId\", \"73:3A:79:25\");",
									"pm.environment.set(\"testBatchBarcode\", \"BATCH-MA1BAE59-ZJ587\");",
									"pm.environment.set(\"testAssemblyBarcode\", \"ASM-MA1EOAB3-VH5NM\");",
									"pm.environment.set(\"userId\", \"\"); // Will be populated after NFC validation",
									"pm.environment.set(\"batchId\", \"\"); // Will be populated after batch validation",
									"pm.environment.set(\"batchAssemblyId\", \"\"); // Will be populated after adding assembly",
									"",
									"console.log(\"Environment variables set successfully\");",
									"pm.test(\"Environment setup complete\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Initialize environment variables and verify API is running"
					},
					"response": []
				}
			],
			"description": "Set up environment variables for testing"
		},
		{
			"name": "1. Authentication",
			"item": [
				{
					"name": "Validate NFC Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has data object\", function () {",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"// Test user details",
									"pm.test(\"Response contains user details\", function () {",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"    pm.expect(jsonData.data).to.have.property('fullName');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.expect(jsonData.data).to.have.property('cardId');",
									"});",
									"",
									"// Store user ID for subsequent requests",
									"if (jsonData.data && jsonData.data.userId) {",
									"    pm.environment.set(\"userId\", jsonData.data.userId);",
									"    console.log(\"User ID stored: \" + jsonData.data.userId);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardId\": \"{{nfcCardId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/nfc/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nfc",
								"validate"
							]
						},
						"description": "Validate NFC card and get user information"
					},
					"response": []
				}
			],
			"description": "Authentication tests for the Logistics API"
		},
		{
			"name": "2. Batch Validation",
			"item": [
				{
					"name": "Validate Batch Barcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has data object\", function () {",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"// Test batch details",
									"pm.test(\"Response contains batch details\", function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('batch_number');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"});",
									"",
									"// Store batch ID for subsequent requests",
									"if (jsonData.data && jsonData.data.id) {",
									"    pm.environment.set(\"batchId\", jsonData.data.id);",
									"    console.log(\"Batch ID stored: \" + jsonData.data.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"barcode\": \"{{testBatchBarcode}}\",\n    \"userId\": \"{{userId}}\",\n    \"deviceInfo\": {\n        \"deviceType\": \"Mobile\",\n        \"appVersion\": \"1.0.0\",\n        \"testMode\": true\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mobile/logistics/batches/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mobile",
								"logistics",
								"batches",
								"validate"
							]
						},
						"description": "Validate batch barcode and get batch information"
					},
					"response": []
				}
			],
			"description": "Tests for batch validation operations"
		},
		{
			"name": "3. Assembly Operations",
			"item": [
				{
					"name": "Add Assembly to Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 201 Created",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Parse response JSON",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has data object\", function () {",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"// Test assembly details",
									"pm.test(\"Response contains batch assembly details\", function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('assembly_name');",
									"    pm.expect(jsonData.data).to.have.property('assembly_barcode');",
									"});",
									"",
									"// Store batch assembly ID for subsequent requests",
									"if (jsonData.data && jsonData.data.id) {",
									"    pm.environment.set(\"batchAssemblyId\", jsonData.data.id);",
									"    console.log(\"Batch Assembly ID stored: \" + jsonData.data.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batchId\": \"{{batchId}}\",\n    \"assemblyBarcode\": \"{{testAssemblyBarcode}}\",\n    \"userId\": \"{{userId}}\",\n    \"cardId\": \"{{nfcCardId}}\",\n    \"deviceInfo\": {\n        \"deviceType\": \"Mobile\",\n        \"appVersion\": \"1.0.0\",\n        \"scanType\": \"barcode\",\n        \"testMode\": true\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mobile/logistics/batches/add-assembly",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mobile",
								"logistics",
								"batches",
								"add-assembly"
							]
						},
						"description": "Add an assembly to a batch"
					},
					"response": []
				},
				{
					"name": "Get Batch Assemblies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has data object\", function () {",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"// Test batch assemblies details",
									"pm.test(\"Response contains assembly count and list\", function () {",
									"    pm.expect(jsonData.data).to.have.property('assembly_count');",
									"    pm.expect(jsonData.data).to.have.property('assemblies');",
									"    pm.expect(jsonData.data.assemblies).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"deviceInfo\": {\n        \"deviceType\": \"Mobile\",\n        \"appVersion\": \"1.0.0\",\n        \"testMode\": true\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mobile/logistics/batches/{{batchId}}/assemblies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mobile",
								"logistics",
								"batches",
								"{{batchId}}",
								"assemblies"
							]
						},
						"description": "Get all assemblies in a batch"
					},
					"response": []
				},
				{
					"name": "Remove Assembly from Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has data object\", function () {",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"// Test removal confirmation",
									"pm.test(\"Assembly was removed successfully\", function () {",
									"    pm.expect(jsonData.data).to.have.property('assemblies_remaining');",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"cardId\": \"{{nfcCardId}}\",\n    \"deviceInfo\": {\n        \"deviceType\": \"Mobile\",\n        \"appVersion\": \"1.0.0\",\n        \"testMode\": true\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mobile/logistics/batch-assemblies/{{batchAssemblyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mobile",
								"logistics",
								"batch-assemblies",
								"{{batchAssemblyId}}"
							]
						},
						"description": "Remove an assembly from a batch"
					},
					"response": []
				}
			],
			"description": "Tests for assembly operations in batches"
		},
		{
			"name": "4. Error Handling",
			"item": [
				{
					"name": "Invalid NFC Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 404 Not Found",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test error response structure",
									"pm.test(\"Response has error object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardId\": \"INVALID-CARD-12345\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/nfc/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nfc",
								"validate"
							]
						},
						"description": "Test error handling with an invalid NFC card"
					},
					"response": []
				},
				{
					"name": "Invalid Batch Barcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 404 Not Found",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test error response structure",
									"pm.test(\"Response has error object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"barcode\": \"INVALID-BATCH-12345\",\n    \"userId\": \"{{userId}}\",\n    \"deviceInfo\": {\n        \"deviceType\": \"Mobile\",\n        \"appVersion\": \"1.0.0\",\n        \"testMode\": true\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mobile/logistics/batches/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mobile",
								"logistics",
								"batches",
								"validate"
							]
						},
						"description": "Test error handling with an invalid batch barcode"
					},
					"response": []
				},
				{
					"name": "Invalid Assembly Barcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response code is 404 Not Found",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test error response structure",
									"pm.test(\"Response has error object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batchId\": \"{{batchId}}\",\n    \"assemblyBarcode\": \"INVALID-ASSEMBLY-12345\",\n    \"userId\": \"{{userId}}\",\n    \"cardId\": \"{{nfcCardId}}\",\n    \"deviceInfo\": {\n        \"deviceType\": \"Mobile\",\n        \"appVersion\": \"1.0.0\",\n        \"scanType\": \"barcode\",\n        \"testMode\": true\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/mobile/logistics/batches/add-assembly",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mobile",
								"logistics",
								"batches",
								"add-assembly"
							]
						},
						"description": "Test error handling with an invalid assembly barcode"
					},
					"response": []
				}
			],
			"description": "Tests for API error handling"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global Pre-request Script for Collection",
					"// This runs before every request",
					"",
					"// Check if we have the required environment variables",
					"if (!pm.environment.get(\"baseUrl\")) {",
					"    console.error(\"Environment variable 'baseUrl' is not set\");",
					"}",
					"",
					"// Add request timestamp for logging",
					"pm.variables.set(\"requestTimestamp\", new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global Test Script for Collection",
					"// This runs after every request",
					"",
					"// Log request info",
					"console.log(pm.info.requestName + \" - Status: \" + pm.response.code);",
					"",
					"// Basic response time check",
					"pm.test(\"Response time is acceptable\", function() {",
					"    // Adjust the threshold as needed for your environment",
					"    pm.expect(pm.response.responseTime).to.be.below(10000); // 10 seconds",
					"});",
					"",
					"// Check for valid content type in responses",
					"if (pm.response.headers.get(\"Content-Type\")) {",
					"    pm.test(\"Content-Type header exists\", function() {",
					"        pm.response.to.have.header(\"Content-Type\");",
					"    });",
					"    ",
					"    pm.test(\"Content-Type is JSON\", function() {",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.trackflow.pl/api",
			"type": "string"
		}
	]
}